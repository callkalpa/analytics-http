<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>HttpAnalytics-SparkScript</Name>
    <Script>
        CREATE TEMPORARY TABLE HTTP_STATISTICS USING CarbonAnalytics OPTIONS (tableName "ORG_WSO2_HTTP_ANALYTICS_STREAM");
        CREATE TEMPORARY TABLE HTTP_REQUESTS_SUMMARY_PER_MINUTE USING CarbonAnalytics OPTIONS (tableName "HTTP_REQUESTS_SUMMARY_PER_MINUTE", schema "
        webappName STRING -i,
        webappType STRING,
        serverName STRING,
        averageRequestCount INT,
        averageResponseTime INT,
        httpSuccessCount INT,
        httpErrorCount INT,
        sessionCount INT,
        time long -i,
        all_facet FACET -i,
        time_facet FACET -i,
        year_facet FACET -i,
        month_facet FACET -i,
        day_facet FACET -i,
        hour_facet FACET -i,
        webappName_facet FACET -i",
        primaryKeys "webappName,serverName,time",
        incrementalParams "HTTP_REQUESTS_SUMMARY_PER_MINUTE, MINUTE"
        );
        INSERT INTO TABLE HTTP_REQUESTS_SUMMARY_PER_MINUTE SELECT
        appName as webappName,
        appType as webappType,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        avg(responseTime) as averageResponseTime,
        sum(if(responseHttpStatusCode&lt;400, 1, 0)) as httpSuccessCount,
        sum(if(responseHttpStatusCode&gt;=400, 1, 0)) as httpErrorCount,
        count(distinct sessionId) as sessionCount,
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(substring(cast(first(timestamp)/1000 as timestamp),0,16)),
        facet1(substring(cast(first(timestamp)/1000 as timestamp),0,4)),
        facet1(substring(cast(first(timestamp)/1000 as timestamp),0,7)),
        facet1(substring(cast(first(timestamp)/1000 as timestamp),0,10)),
        facet1(substring(cast(first(timestamp)/1000 as timestamp),0,13)),
        facet1(appName)
        FROM HTTP_STATISTICS GROUP BY appName, appType,metaServerName, substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_REQUESTS_SUMMARY_PER_MINUTE;

        CREATE TEMPORARY TABLE HTTP_RESPONSE_STATUS USING CarbonAnalytics OPTIONS (tableName "HTTP_RESPONSE_STATUS", schema "
        webappName STRING -i,
        serverName STRING,
        averageRequestCount INT,
        responseHttpStatusCode INT,
        time long -i,
        all_facet FACET -i,
        responseHttpStatusCode_facet FACET -i",
        primaryKeys "webappName,serverName,responseHttpStatusCode,time",
        incrementalParams "HTTP_RESPONSE_STATUS, MINUTE"
        );
        INSERT INTO TABLE HTTP_RESPONSE_STATUS SELECT
        appName as webappName,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        responseHttpStatusCode,
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(responseHttpStatusCode)
        FROM HTTP_STATISTICS GROUP BY appName, metaServerName, responseHttpStatusCode, substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_RESPONSE_STATUS;

        CREATE TEMPORARY TABLE HTTP_LANGUAGE USING CarbonAnalytics OPTIONS (tableName "HTTP_LANGUAGE", schema "
        webappName STRING -i,
        serverName STRING,
        averageRequestCount INT,
        language STRING,
        time long -i,
        all_facet FACET -i,
        language_facet FACET -i",
        primaryKeys "webappName,serverName,language,time",
        incrementalParams "HTTP_LANGUAGE, MINUTE"
        );
        INSERT INTO TABLE HTTP_LANGUAGE SELECT
        appName as webappName,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        language,
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(language)
        FROM HTTP_STATISTICS
        WHERE lower(appType)='webapp'
        GROUP BY appName, metaServerName, language, substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_LANGUAGE;

        CREATE TEMPORARY TABLE HTTP_BROWSER USING CarbonAnalytics OPTIONS (tableName "HTTP_BROWSER", schema "
        webappName STRING -i,
        serverName STRING,
        averageRequestCount INT,
        userAgentFamily STRING,
        time long -i,
        all_facet FACET -i,
        userAgentFamily_facet FACET -i",
        primaryKeys "webappName,serverName,userAgentFamily,time",
        incrementalParams "HTTP_BROWSER, MINUTE"
        );
        INSERT INTO TABLE HTTP_BROWSER SELECT
        appName as webappName,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        first(extractUserAgentFamily(userAgent)),
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(first(extractUserAgentFamily(userAgent)))
        FROM HTTP_STATISTICS
        WHERE lower(appType)='webapp'
        GROUP BY appName, metaServerName,extractUserAgentFamily(userAgent) , substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_BROWSER;

        CREATE TEMPORARY TABLE HTTP_OPERATING_SYSTEM USING CarbonAnalytics OPTIONS (tableName "HTTP_OPERATING_SYSTEM", schema "
        webappName STRING -i,
        serverName STRING,
        averageRequestCount INT,
        operatingSystem STRING,
        time long -i,
        all_facet FACET -i,
        operatingSystem_facet FACET -i",
        primaryKeys "webappName,serverName,operatingSystem,time",
        incrementalParams "HTTP_OPERATING_SYSTEM, MINUTE"
        );
        INSERT INTO TABLE HTTP_OPERATING_SYSTEM SELECT
        appName as webappName,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        first(extractOSFamily(userAgent)),
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(first(extractOSFamily(userAgent)))
        FROM HTTP_STATISTICS
        WHERE lower(appType)='webapp'
        GROUP BY appName, metaServerName,extractOSFamily(userAgent) , substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_OPERATING_SYSTEM;

        CREATE TEMPORARY TABLE HTTP_DEVICE_TYPE USING CarbonAnalytics OPTIONS (tableName "HTTP_DEVICE_TYPE", schema "
        webappName STRING -i,
        serverName STRING,
        averageRequestCount INT,
        deviceCategory STRING,
        time long -i,
        all_facet FACET -i,
        deviceCategory_facet FACET -i",
        primaryKeys "webappName,serverName,deviceCategory,time",
        incrementalParams "HTTP_DEVICE_TYPE, MINUTE"
        );
        INSERT INTO TABLE HTTP_DEVICE_TYPE SELECT
        appName as webappName,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        first(extractDeviceFamily(userAgent)),
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(first(extractDeviceFamily(userAgent)))
        FROM HTTP_STATISTICS
        WHERE lower(appType)='webapp'
        GROUP BY appName, metaServerName,extractDeviceFamily(userAgent) , substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_DEVICE_TYPE;

        CREATE TEMPORARY TABLE HTTP_GEOLOCATION USING CarbonAnalytics OPTIONS (tableName "HTTP_GEOLOCATION", schema "
        webappName STRING -i,
        serverName STRING,
        averageRequestCount INT,
        country STRING,
        time long -i,
        all_facet FACET -i,
        country_facet FACET -i",
        primaryKeys "webappName,serverName,country,time",
        incrementalParams "HTTP_GEOLOCATION, MINUTE"
        );
        INSERT INTO TABLE HTTP_GEOLOCATION SELECT
        appName as webappName,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        first(getCountry(remoteAddress)),
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(first(getCountry(remoteAddress)))
        FROM HTTP_STATISTICS
        WHERE lower(appType)='webapp'
        GROUP BY appName, metaServerName,getCountry(remoteAddress), substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_GEOLOCATION;

        CREATE TEMPORARY TABLE HTTP_REFERRER USING CarbonAnalytics OPTIONS (tableName "HTTP_REFERRER", schema "
        webappName STRING -i,
        serverName STRING,
        averageRequestCount INT,
        referrer STRING,
        time long -i,
        all_facet FACET -i,
        referrer_facet FACET -i",
        primaryKeys "webappName,serverName,referrer,time",
        incrementalParams "HTTP_REFERRER, MINUTE"
        );
        INSERT INTO TABLE HTTP_REFERRER SELECT
        appName as webappName,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        referrer,
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(referrer)
        FROM HTTP_STATISTICS
        WHERE lower(appType)='webapp'
        GROUP BY appName, metaServerName,referrer, substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_REFERRER;

        CREATE TEMPORARY TABLE HTTP_WEBAPP_CONTEXT USING CarbonAnalytics OPTIONS (tableName "HTTP_WEBAPP_CONTEXT", schema "
        webappName STRING -i,
        serverName STRING,
        averageRequestCount INT,
        webappcontext STRING,
        time long -i,
        all_facet FACET -i,
        webappcontext_facet FACET -i",
        primaryKeys "webappName,serverName,webappcontext,time",
        incrementalParams "HTTP_WEBAPP_CONTEXT, MINUTE"
        );
        INSERT INTO TABLE HTTP_WEBAPP_CONTEXT SELECT
        appName as webappName,
        metaServerName as serverName,
        count(requestUri) as averageRequestCount ,
        first(requestUri),
        cast(first(timestamp)/1000 as timestamp) as time,
        facet1(1),
        facet1(first(requestUri))
        FROM HTTP_STATISTICS
        WHERE lower(appType)='webapp'
        GROUP BY appName, metaServerName,requestUri, substring(cast(timestamp/1000 as timestamp),0,16);
        INCREMENTAL_TABLE_COMMIT HTTP_WEBAPP_CONTEXT;
    </Script>
    <CronExpression>0 0/1 * * * ? *</CronExpression>

</Analytics>
